#problem 1
#first we need to FIND the bug
#but on a guess, I'm thinking the original code is doubling the NEW values instead iof the ORIGINAL values'

Python 3.12.2 (tags/v3.12.2:6abddd9, Feb  6 2024, 21:26:36) [MSC v.1937 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> from typing import List
>>> def double_preceding(values: list[float]):
...   if values != []:
...     temp = values[0]
...     for i in range(1, len(values)):
...       values[i] = 2 * temp
...       temp = values[i]
... 
...   
>>> testListOne = [1, 4, 3]
>>> testListTwo = [1, 3, 4, 2]
>>> double_preceding(testListOne)
>>> testListOne
[1, 2, 4]
>>> double_preceding(testListTwo)
>>> testListTwo
[1, 2, 4, 8]

#as I suspected, it's not reading the original list after the first value'
#always create a buffer list

def doublePreceding(values: list[float]):
  if values != []:
    temp = []
    temp.append(values[0])
    for i in range(1, len(values)):
      temp.append(2 * values[i-1])
    values = temp

#let's try it out!'
#ironically I ran into a bug of my own regarding memory asignment
#I created this test function
def doublePrecedingTest(values: list[float]):
  if values != []:
    temp = []
    temp.append(values[0])
    for i in range(1, len(values)):
      temp.append(2 * values[i-1])
    print(temp)
    print(values)
    values = temp
    print(values)
#but it was getting different results than the non-test function
>>> def doublePreceding(values: list[float]):
...   if values != []:
...     temp = []
...     temp.append(values[0])
...     for i in range(1, len(values)):
...       temp.append(2 * values[i-1])
...     values = temp
... 
...     
>>> testListThree = [4, 3, 2, 1]
>>> doublePreceding(testListThree)
>>> testListThree
[4, 3, 2, 1]
>>> def doublePrecedingTest(values: list[float]):
...   if values != []:
...     temp = []
...     temp.append(values[0])
...     for i in range(1, len(values)):
...       temp.append(2 * values[i-1])
...     print(temp)
...     print(values)
...     values = temp
...     print(values)
... 
>>> testListThree = [4, 3, 2, 1]
>>> doublePrecedingTest(testListThree)
[4, 8, 6, 4]
[4, 3, 2, 1]
[4, 8, 6, 4]

#I'm going to come back to this later. I've got the right logic but it only works when it feels like it

#problem 2
#the six cases I would want to test are:
#1, lines don't intersect'
#2, lines do intersect, in the middle of the lines
#3, lines do intersect, at a shared vertex
#4, lines are coincident and the same size
#5, lines are coincident and not the same size
#6, an error case where not enough arguments exist
#I want a demonstration of three basic cases (1, 2, 5) some corner-cases (3, 4) and a demonstration of the errors (6)
#and the hypothetical docstring:
>>> [[1.0, 1.0], [3.0, 1.0]], [[1.0, 3.0],[3.0, 2.0]]
None
>>> [[1.0, 1.0], [3.0, 3.0]], [[1.0, 3.0],[3.0, 1.0]]
[2.0, 2.0]
>>> [[1.0, 1.0], [2.0, 3.0]], [[2.0, 3.0],[3.0, 1.0]]
[2.0, 3.0]
>>> [[1.0, 1.0], [3.0, 2.0]], [[1.0, 1.0],[3.0, 2.0]]
[[1.0, 1.0], [3.0, 2.0]]
>>> [[1.0, 1.0], [3.0, 2.0]], [[1.0, 1.0],[5.0, 3.0]]
[[1.0, 1.0], [3.0, 2.0]]
>>> [[1.0, 1.0], [3.0, 1.0]], [1.0, 3.0]
Error: please specify two full line segments
