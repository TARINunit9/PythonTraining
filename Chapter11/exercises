#problem 1

Python 3.12.2 (tags/v3.12.2:6abddd9, Feb  6 2024, 21:26:36) [MSC v.1937 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> def find_dups(inputList: list[int]) -> list:
... 	duplicates = []
... 	for itor1 in inputList:
... 		for itor2 in inputList:
... 			if itor2 <= itor1:
... 				continue
... 			elif (inputList[itor1] == inputList[itor2]) and (itor1 != itor2):
... 				duplicates.append(inputList[itor1])
... 	return duplicates
... 
>>> find_dups([1,2,3,3,4])
[3, 3]

#problem 2
def read_molecule(reader: TextIO) -> CompoundDict:
	keyString = ''
	valueString = ''
	dictChunk = {}
	for line in reader:
		line.split()
		if line[0] == 'COMPND':
			keyString = line[1]
		elif line[0] == 'nAtom':
			#add current line to value
		elif line[0] == 'nEnd':
			#update dictionary, we're done with this molecule
			#dictChunk.update("key": "value"})
			#keyString = ''
			#valueString = ''
	...
#random note to self
#dictChunk.update(keyString, (line[2], line[3], line[4], line[5]))
#also note: while a tuple is immutable, a pointer pointing at a tuple is mutable
#thistuple = x; thistuple = y;
	...
	return dictChunk

#problem 3
#can't use as many buffer variables as I'm used to because of Tuple restrictions
def mating_pairs(males: list, females: list) -> list[Tuple]:
	finalResults = []
	while (males != []) and (females != []):
		finalResults.append((males.pop(), females.pop()))
	return finalResults

#problem 4
#first draft:
def listAuthors(filenames: list) -> list:
	authorList = []
	for filename in filenames
		thisFile = open(filename, 'r')
		contents = thisFile.read()
		for line in contents:
			bufferLine = line.lower()
			if bufferLine.startswith("author"):
				line.split()
				authorList.append(line[1:])
		thisFile.close()
	return authorList

#problem 5
def count_values(dictionary: dictionary) -> Int:
	uniqueValues = []
	#so it turns out the dictionary.values() method exists:
	for item in dictionary.values():
		if item not in uniqueValues:
			#yeah apparently there's a whole "not in" operator
			uniqueValues.append(item)

	return len(uniqueValues)

#problem 6
def leastLikely(particleDict: dictionary) -> value:
	returnValue = 1.0
	returnName = "This is a placeholder message"
	#I think this is how you iterate over the values in a dictionary
	for item in particleDict:
		if particleDict[item] < returnValue:
			returnValue = particleDict[item]
			returnName = item
	return returnName

#problem 7
def count_duplicates(someDictionary: dictionary) -> Int:
	uniquesList = []
	dupeCount = 0
	for item in someDictionary:
		if someDictionary[item] not in duplicatesList:
			duplicatesList.append(item)
		else:
			dupeCount = dupeCount + 1
	return dupeCount
